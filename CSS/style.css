@import url("https://fonts.googleapis.com/css2?family=Lato:wght@300&display=swap");

:root {
  --primary-color: #047aed;
  --secondary-color: #1c3fa8;
  --dark-color: #002240;
  --light-color: #f4f4f4;
  --success-color: #5cb85c;
  --error-color: #d9534f;
}
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
img {
  max-width: 100%;
}
ul {
  list-style-type: none;
}
a {
  text-decoration: none;
  color: #333;
}
body {
  font-family: "Lato", sans-serif;
  line-height: 1.6;
  color: #333;
}
p {
  margin: 10px 0;
}
h1,
h2 {
  margin: 10px;
  font-weight: 300;
  margin: 10px 0;
}

.hidden {
  visibility: hidden;
  height: 0;
}

/*Navbar.....*/
.navbar {
  background: var(--primary-color);
  color: #fff;
  height: 70px;
}
.navbar .flex {
  justify-content: space-between;
}
.navbar ul {
  display: flex;
}
.navbar a {
  padding: 10px;
  margin: 0 5px;
  color: #fff;
}
.navbar a:hover {
  border-bottom: 1px solid #fff;
}

/* Showcase*/
.showCase {
  background: var(--primary-color);
  height: 400px;
  color: #fff;
  position: relative;
}
.showCase h1 {
  font-size: 40px;
}
.showCase p {
  margin: 20px 0;
}
.showCase .grid {
  gap: 30px;
  grid-template-columns: 55% 45%;
  overflow: visible; /*we have used this property in .showCase .grid , because the form was overflowing outside the grid.*/
}
.showCase-form {
  position: relative;
  top: 60px;
  height: 350px;
  max-width: 400px;
  padding: 40px;
  z-index: 100; /*to make sure that the form always remain on top of showCase-form box.*/
  justify-self: flex-end;
  animation: slideInFromRight 1s ease-in;
}
.showCase-form .form-control {
  margin: 30px 0;
}
.showCase-form input[type="text"],
.showCase-form input[type="email"] {
  border: 0;
  border-bottom: 1px solid #333;
  width: 100%;
  font-size: 16px;
  padding: 3px;
}
.showCase-text {
  animation: slideInFromLeft 1s ease-in;
}
.showCase-form input:focus {
  outline: none;
}
.showCase::after {
  /*(v.v.imp. NOTE-:  to use ::after and ::before we must use position:relative; on the element we are using with ::after or ::before and position:absolute; on .element::after or element::before )*/
  content: "";
  position: absolute;
  bottom: -70px;
  left: 0;
  right: 0;
  height: 100px;
  background: #fff;
  transform: skewY(-3deg);
  -webkit-transform: skewY(-3deg);
  -moz-transform: skewY(-3deg);
  -ms-transform: skewY(-3deg);
}

/* (v.v.imp.) NOTE-: to make your website supported on most of the browsing platform-: https://www.google.com/search?ei=adHkX7SOAd_nz7sPsvmN-Ao&q=how+to+make+my+website+work+on+internet+explorer+as+a+developer&oq=how+to+make+my+website+work+on+internet+explorer+as+a+deve&gs_lcp=CgZwc3ktYWIQAxgAMgUIIRCgATIECCEQFToECAAQRzoICCEQFhAdEB5KBQgIEgExUKbjB1i6pAhgp6wIaAJwAngAgAGRA4gBiCGSAQowLjMuMTQuMC4xmAEAoAEBqgEHZ3dzLXdpesgBCMABAQ&sclient=psy-ab*/

/*Stats*/
.stats {
  padding-top: 100px;
  animation: slideInFromBottom 1s ease-in 10ms;
}
.stats .stats-heading {
  /* find out why it is not working when using only .stats-heading*/
  max-width: 500px;
  margin: 0 auto;
}
.stats .grid-3 h3 {
  font-size: 35px;
}
.stats i {
  margin-bottom: 10px;
}
.stats .grid p {
  font-size: 20px;
  font-weight: bold;
}

/* CLI */

.cli .grid {
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 1fr);
}

.cli .grid > *:first-child {
  grid-column: 1 / 3;
  grid-row: 1 / 3;
}
/*(v.v.imp.) NOTE-: check what happens to cli image after removing img {width: 100%}, width: 100% makes the image 100% of the parent if we don't use the property than image will not get resized acc. to the grid and might overflow out of the grid(if the original size of image is greater than size of grid column)*/

/* Cloud */
.cloud .grid {
  grid-template-columns: 4fr 3fr;
}

/* Languages */
.languages .card {
  margin: 18px 10px 40px; /*top, left-right, bottom*/
  transition: transform 0.2s ease-in 0s; /*to make transform work smoothly.*/
}
.languages .flex {
  flex-wrap: wrap;
}
.languages .card h4 {
  font-size: 20px;
  margin-bottom: 10px;
}
.languages .card:hover {
  transform: translateY(-15px);
  /*-ve value in scaleY means it will sacle in the upper direction*/
}

/* Footer */
.footer .social a {
  margin: 0 10px;
}
@import url("https://fonts.googleapis.com/css2?family=Lato:wght@300&display=swap");

:root {
  --primary-color: #047aed;
  --secondary-color: #1c3fa8;
  --dark-color: #002240;
  --light-color: #f4f4f4;
}
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
img {
  max-width: 100%;
}
ul {
  list-style-type: none;
}
a {
  text-decoration: none;
  color: #333;
}
body {
  font-family: "Lato", sans-serif;
  line-height: 1.6;
  color: #333;
}
p {
  margin: 10px 0;
}
h1,
h2 {
  margin: 10px;
  font-weight: 300;
  margin: 10px 0;
}

/*Navbar.....*/
.navbar {
  background: var(--primary-color);
  color: #fff;
  height: 70px;
}
.navbar .flex {
  justify-content: space-between;
}
.navbar ul {
  display: flex;
}
.navbar a {
  padding: 10px;
  margin: 0 5px;
  color: #fff;
}
.navbar a:hover {
  border-bottom: 1px solid #fff;
}

/* Showcase*/
.showCase {
  background: var(--primary-color);
  height: 400px;
  color: #fff;
  position: relative;
}
.showCase h1 {
  font-size: 40px;
}
.showCase p {
  margin: 20px 0;
}
.showCase .grid {
  gap: 30px;
  grid-template-columns: 55% 45%;
  overflow: visible; /*we have used this property in .showCase .grid , because the form was overflowing outside the grid.*/
}
.showCase-form {
  position: relative;
  top: 60px;
  height: 350px;
  width: 400px;
  padding: 40px;
  z-index: 100; /*to make sure that the form always remain on top of showCase-form box.*/
  justify-self: end;
}
.showCase-form .form-control {
  margin: 30px 0;
}
.showCase-form input[type="text"],
.showCase-form input[type="email"] {
  border: 0;
  border-bottom: 1px solid #333;
  width: 100%;
  font-size: 16px;
  padding: 3px;
}
.showCase-form input:focus {
  outline: none;
}
.showCase::after {
  /*(v.v.imp. NOTE-:  to use ::after and ::before we must use position:relative; on the element we are using with ::after or ::before and position:absolute; on .element::after or element::before )*/
  content: "";
  position: absolute;
  bottom: -70px;
  left: 0;
  right: 0;
  height: 100px;
  background: #fff;
  transform: skewY(-3deg);
  -webkit-transform: skewY(-3deg);
  -moz-transform: skewY(-3deg);
  -ms-transform: skewY(-3deg);
}

/* (v.v.imp.) NOTE-: to make your website supported on most of the browsing platform-: https://www.google.com/search?ei=adHkX7SOAd_nz7sPsvmN-Ao&q=how+to+make+my+website+work+on+internet+explorer+as+a+developer&oq=how+to+make+my+website+work+on+internet+explorer+as+a+deve&gs_lcp=CgZwc3ktYWIQAxgAMgUIIRCgATIECCEQFToECAAQRzoICCEQFhAdEB5KBQgIEgExUKbjB1i6pAhgp6wIaAJwAngAgAGRA4gBiCGSAQowLjMuMTQuMC4xmAEAoAEBqgEHZ3dzLXdpesgBCMABAQ&sclient=psy-ab*/

/*Stats*/
.stats {
  padding-top: 100px;
}
.stats .stats-heading {
  /* find out why it is not working when using only .stats-heading*/
  max-width: 500px;
  margin: 0 auto;
}
.stats .grid-3 h3 {
  font-size: 35px;
}
.stats i {
  margin-bottom: 10px;
}
.stats .grid p {
  font-size: 20px;
  font-weight: bold;
}

/* CLI */

.cli .grid {
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 1fr);
}

.cli .grid > *:first-child {
  grid-column: 1 / 3;
  grid-row: 1 / 3;
}
/*(v.v.imp.) NOTE-: check what happens to cli image after removing img {width: 100%}, width: 100% makes the image 100% of the parent if we don't use the property than image will not get resized acc. to the grid and might overflow out of the grid(if the original size of image is greater than size of grid column)*/

/* Cloud */
.cloud .grid {
  grid-template-columns: 4fr 3fr;
}

/* Languages */
.languages .card {
  margin: 18px 10px 40px; /*top, left-right, bottom*/
  transition: transform 0.2s ease-in 0s; /*to make transform work smoothly.*/
}
.languages .flex {
  flex-wrap: wrap;
}
.languages .card h4 {
  font-size: 20px;
  margin-bottom: 10px;
}
.languages .card:hover {
  transform: translateY(-15px);
  /*-ve value in scaleY means it will sacle in the upper direction*/
}

/* Head*/
.features-head img,
.docs-head img {
  width: 250px;
  justify-self: flex-end;
}
.features-sub-head img {
  /* First it was written like .features-sub-head .container img{} which was not letting the media querie .features-sub-head img {justify-self:center} working beacuse css always gives preference to more specific properties and .features-sub-head .container img {} is more specific than .features-sub-head img {}*/
  width: 300px;
  justify-self: flex-end;
}
.features-main .card > i {
  margin-right: 20px;
}
.features-main .grid {
  padding: 30px;
}
.features-main .grid-3 > *:first-child {
  grid-column: 1 / 4;
}
.features-main .grid-3 > *:nth-child(2) {
  grid-column: 1 / 3;
}

/* Docs */
.docs-main h3 {
  margin: 20px 0;
}
.docs-main .grid {
  grid-template-columns: 1fr 2fr;
  align-items: flex-start;
}
.docs-main nav li {
  padding-bottom: 5px;
  margin-bottom: 5px;
  font-size: 17px;
  border-bottom: 1px solid #ccc;
}

.docs-main a:hover {
  font-weight: bold;
}
.docs-main pre {
  background: #333;
  color: #fff;
  padding: 10px;
}
/* Footer */
.footer .social a {
  margin: 0 10px;
}

/* Animations */
@keyframes slideInFromLeft {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(0);
    /*translateX(0) means at actual(initial )position*/
  }
}
@keyframes slideInFromRight {
  0% {
    transform: translateX(100%);
  }
  100% {
    transform: translateX(0); /*translateX(0) means at actual position*/
  }
}
@keyframes slideInFromTop {
  0% {
    transform: translateY(-100%);
  }
  100% {
    transform: translateY(0); /*translateX(0) means at actual position*/
  }
}
@keyframes slideInFromBottom {
  0% {
    transform: translateY(100%);
  }
  100% {
    transform: translateY(0); /*translateX(0) means at actual position*/
  }
}

/*media queries*/

@media (max-width: 59.5rem) {
  /* 955px = 59.6975rem, max-width and min-width work opposite in meadia queries.*/
  .grid,
  .showCase .grid,
  .stats .grid,
  .cli .grid,
  .cloud .grid,
  .features-main .grid,
  .docs-main .grid {
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;
  }
  .showCase {
    height: auto;
  }
  .showCase .showCase-text {
    text-align: center;
    margin-top: 40px;
  }
  .showCase .showCase-form {
    justify-self: center;
  }
  .cli .grid > *:first-child {
    grid-column: 1; /*because spanning of cli image was causing problem to place cards on seperate row.*/
    grid-row: 1;
  }
  .features-head,
  .features-sub-head,
  .docs-head {
    text-align: center;
  }
  .features-head img,
  .features-sub-head img,
  .docs-head img {
    justify-self: center;
  }
}

/* mobile */
@media (max-width: 39rem) {
  .navbar {
    height: 110px;
  }
  .navbar .flex {
    flex-direction: column;
  }
  .navbar ul {
    padding: 10px;
    background: rgba(0, 0, 0, 0.1);
    border-radius: 5px;
  }
}

@media (max-width: 42.5rem) {
  .features-main .grid-3 > *:first-child,
  .features-main .grid-3 > *:nth-child(2) {
    grid-column: 1;
    grid-row: 1;
  }
}

/* (v.v.imp.) NOTE-: How to use netlify free forms-: https://www.youtube.com/watch?v=6ElQ689HRcY */

/* (v.v.imp.) NOTE-: How to Deploy your website or static pages using netlify -: https://www.youtube.com/watch?v=bjVUqvcCnxM */

/*(v.v.v.imp.) NOTE-: when you are defining utilities classes always define structural classes(like- .card .grid .container, etc.) on 
                      top and designing classes(like-: .bg- .btn- .py- .my- , etc.) on bottom, beacuse when you use multiple classes 
inside a element the order of applying css depends upon specificity and this is the specificity order-: 1-: inline 2-: id 3-: classes,
 pseudo classes,attributes 4-: element , but if we are using only classes than order is decided by the occurrence of those classes in 
 the css stylesheet. Also when css of any class is not applied on the browser than check using inspect-inside style box and there check 
 which property of which class is being overridden(or not used) and according to that change the order of occurence of classes in the 
 stylesheet.*/
